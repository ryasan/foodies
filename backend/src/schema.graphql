# types
type Query {
  users: [User!]!
  me: User
  recipes(limit: Int, skip: Int): [Recipe!]!
  recipeDetails(recipeId: ID!): Recipe
  myRecipes(limit: Int, skip: Int): [Recipe!]!
  likedRecipes(limit: Int, skip: Int): [Recipe!]!
}

type Mutation {
  signup(signupInput: SignupInput): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  createRecipe(createRecipeInput: CreateRecipeInput): Recipe!
  updateRecipeLikes(recipeId: ID!): Recipe!
  deleteRecipe(recipeId: ID!): Recipe!
}

type User {
  _id: ID!
  email: String!
  password: String!
  username: String!
  recipes: [ID!]!
}

type Recipe {
  _id: ID!
  title: String!
  image: String!
  largeImage: String!
  imgPublicId: String!
  likedByIds: [ID!]!
  ingredients: [String]!
  directions: [String]!
  creatorUsername: String!
  creatorId: String!
}

type SuccessMessage {
  message: String
}

# inputs
input SignupInput {
  email: String!
  password: String!
  username: String!
}

input CreateRecipeInput {
  image: String!
  largeImage: String!
  title: String!
  ingredients: [String]!
  directions: [String]!
  imgPublicId: String!
}
